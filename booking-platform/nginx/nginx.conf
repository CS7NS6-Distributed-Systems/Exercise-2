# Events block: Configures settings for how NGINX handles connections.
events {
    worker_connections 1024;  # Increased connection limit
    multi_accept on;  # Accept as many connections as possible
}

# HTTP block: Contains directives for handling HTTP traffic.
http {
    # Basic settings
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile      on;
    tcp_nopush    on;
    tcp_nodelay   on;
    server_tokens off;  # Don't show Nginx version

    # Timeouts
    keepalive_timeout  65;
    client_body_timeout 15;
    client_header_timeout 15;
    send_timeout 15;
    types_hash_max_size 2048;

    # Compression
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_vary on;
    gzip_types
        application/javascript
        application/json
        application/x-javascript
        text/css
        text/javascript
        text/plain
        text/xml;

    # Caching
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=booking_cache:10m max_size=1g inactive=60m;
    proxy_cache_key "$scheme$request_method$host$request_uri";

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    # Enhanced logging
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" '
                      '$request_time $upstream_response_time $pipe '
                      'upstream: $upstream_addr';

    access_log /var/log/nginx/access.log detailed;
    error_log /var/log/nginx/error.log warn;

    # Upstream block: Defines a group of servers for load balancing
    upstream booking_service {
        least_conn;  # Use least connections method for better distribution

        # Add multiple server instances with health checks
        server booking-service-1:5000 max_fails=3 fail_timeout=30s;
        server booking-service-2:5000 max_fails=3 fail_timeout=30s;
        server booking-service-3:5000 max_fails=3 fail_timeout=30s;

        # Server health tracking and persistent connections
        keepalive 32;
    }

    # HTTP Server
    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Frame-Options SAMEORIGIN;

        # Client settings
        client_max_body_size 15M;

        location / {
            # Rate limiting
            limit_req zone=api_limit burst=20 nodelay;

            # Forwards requests to the `booking_service` upstream group.
            proxy_pass http://booking_service;

            # Enhanced proxy headers for better request handling
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Enable WebSocket proxying if needed
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Proxy buffering for better performance
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 8 8k;

            # Cache exclusions
            proxy_no_cache $http_pragma $http_authorization;
            proxy_cache_bypass $http_pragma $http_authorization;
        }

        # Static assets with caching
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            proxy_pass http://booking_service;
            proxy_cache booking_cache;
            proxy_cache_valid 200 302 1h;
            proxy_cache_valid 404 1m;
            add_header X-Cache-Status $upstream_cache_status;
            expires 1d;
        }

        # Health check endpoint
        location /health {
            proxy_pass http://booking_service;
            access_log off;

            # Rate limiting settings for health checks - with higher burst value
            limit_req zone=api_limit burst=100 nodelay;
        }

        # Add status monitoring endpoint
        location /nginx_status {
            stub_status on;
            access_log off;
            # Restrict access to internal IPs
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Docker internal network
            deny all;
        }

        # Custom error pages
        error_page 500 502 503 504 /50x.html;
        error_page 404 /404.html;

        location = /50x.html {
            root /usr/share/nginx/html;
        }

        location = /404.html {
            root /usr/share/nginx/html;
        }
    }
}