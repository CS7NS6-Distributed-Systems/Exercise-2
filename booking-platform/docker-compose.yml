services:
  # Flask Booking container
  booking-service:
    build: ./booking-service
    ports:
      - "${BOOKING_SERVICE_PORT}:5000"  # Internal port is fixed to 5000
    environment:
      # - KAFKA_BROKER=${KAFKA_BROKER}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - COCKROACHDB_HOST=${COCKROACHDB_HOST}
      - COCKROACHDB_PORT=${COCKROACHDB_PORT}
      - MONGODB_HOST=${MONGODB_HOST}
      - MONGODB_PORT=${MONGODB_PORT}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      # kafka:
      cockroachdb:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # kafka container
  # kafka:
  #   image: bitnami/kafka:latest
  #   ports:
  #     - "${KAFKA_PORT}:9092"  # Internal port is fixed to 9092
  #   environment:
  #     - KAFKA_CFG_ZOOKEEPER_CONNECT=${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT}
  #   volumes:
  #     - kafka_data:/bitnami/kafka
  #   depends_on:
  #     - zookeeper

  # # zookeeper container
  # zookeeper:
  #   image: bitnami/zookeeper:latest
  #   ports:
  #     - "${ZOOKEEPER_PORT}:2181"  # Internal port is fixed to 2181
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=${ZOOKEEPER_ALLOW_ANONYMOUS_LOGIN}
  #   volumes:
  #     - zookeeper_data:/bitnami/zookeeper

  # redis container
  redis:
    image: redis:latest
    ports:
      - "${REDIS_PORT}:6379"  # Internal port is fixed to 6379
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5
      start_period: 10s
      timeout: 3s
    restart: unless-stopped

  # cockroachdb container
  cockroachdb:
    image: cockroachdb/cockroach:latest
    ports:
      - "${COCKROACHDB_PORT}:26257"
      - "${COCKROACHDB_ADMIN_PORT}:8080"
    command: start-single-node --insecure
    volumes:
      - cockroachdb_data:/cockroach/cockroach-data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backup:/cockroach/cockroach-data/extern/1/backup
      - ./init-cockroach.sh:/init-cockroach.sh
    entrypoint: ["/bin/sh", "/init-cockroach.sh"]
    healthcheck:
      test: ["CMD", "cockroach", "sql", "--insecure", "-e", "SELECT 1"]
      interval: 10s
      retries: 5
      start_period: 20s
    restart: unless-stopped


  # mongodb container
  mongodb:
    image: mongo:latest
    ports:
      - "${MONGODB_PORT}:27017"  # Internal port is fixed to 27017
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      retries: 5
      start_period: 15s
      timeout: 5s
    restart: unless-stopped

  # nginx container
  nginx:
    image: nginx:latest
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./booking-service/app/static:/app/static
    environment:
      - BOOKING_SERVICE_HOST=${BOOKING_SERVICE_HOST}
      - BOOKING_SERVICE_PORT=${BOOKING_SERVICE_PORT}
      - NGINX_PORT=${NGINX_PORT}
    depends_on:
      - booking-service
    restart: unless-stopped

# persistent storage for all containers
volumes:
  mongodb_data:
  cockroachdb_data:
  # kafka_data:
  # zookeeper_data:
  redis_data: